#include <cstdlib>
#include <SDL.h>
#include <iostream>
#include <ctime>
#include <thread>
SDL_Surface* surface;
SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;
SDL_Event event;
SDL_Rect block;


const int SCREEN_WIDTH = 900;
const int SCREEN_HEIGHT = 900;
int downb = 0, ret = 3, timey = 0;
double score = 1000;
int a[26][26];
int lay[1000][2];
int x=5, y=1, lex=3, u=0;

void start() {

    x = 5; y = 1; lex = 3; u = 0; downb = 0; ret = 3; timey = 0;
    score = 1000;
};

void blockadd() {
    int xr = rand() % 25, yr = rand() % 25;
    while (a[yr][xr] != 0) { xr = rand() % 25; yr = rand() % 25; }
    a[yr][xr] = 1;
}

void eat() {
    blockadd();
    int i, j;
    for (i = 0; i < 999; i++) {
        if (lay[i][1] == -9) { u = i; break; };
    }
    score += 50;
    lay[u][0] = lay[u - 1][0];
    lay[u][1] = lay[u - 1][1];
}

void move() {
    int i, j;
    for (i = 0; i < 998; i++) {
        if (lay[i][1] == -9) { u=i-1; break; }
    }
    for (i = u; i > 0; i--) {
        lay[i][0] = lay[i - 1][0];
        lay[i][1] = lay[i - 1][1];
    }
    lay[0][0] = y;
    lay[0][1] = x;
    if (a[y][x] == 1) { eat(); }
    if (a[y][x] == 2) { start(); }

}

void left() {
    x = x - 1;
    move();
    lex = 1;
}

void right() {
    x = x + 1;
    move();
    lex = 3;
}

void down() {
    y = y + 1;
    move();
    lex = 4;
}
void up() {
    y = y - 1;
    move();
    lex = 2;
}

void next() {
    switch (lex)
    {
    case 1:left(); break;
    case 2:up(); break;
    case 3:right(); break;
    case 4:down(); break;
    }
}

int colori(int y1, int x1) {
    block.x = x1 * 20;
    block.y = y1 * 20;
    switch (a[y1][x1])
    {
    case 1:SDL_SetRenderDrawColor(renderer, 255, 0, 0, SDL_ALPHA_OPAQUE); break;
    case 2:SDL_SetRenderDrawColor(renderer, 200, 200, 120, SDL_ALPHA_OPAQUE); break;
    default:SDL_SetRenderDrawColor(renderer, 200, 200, 200, SDL_ALPHA_OPAQUE); break;
    }
    SDL_RenderFillRect(renderer, &block);
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);
    SDL_RenderDrawRect(renderer, &block);

    return 0;
}
void draw_me(){
    block.x = x * 20;
    block.y = y * 20;
    SDL_SetRenderDrawColor(renderer, 200, 100, 50, SDL_ALPHA_OPAQUE);
    SDL_RenderFillRect(renderer, &block);
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);
    SDL_RenderDrawRect(renderer, &block);
    
}
int main(int argc, char* argv[]) {
    srand(static_cast<unsigned int>(time(0)));
    block.w = 20;
    block.h = 20;
    int i, j;
    for (i = 1; i < 25; i++) {
        for (j = 1; j < 25; j++) {
            a[i][j] = 0;
        }
    }
    for (i = 0; i < 1000; i++) {
        lay[i][1] = -9;
        lay[i][0] = -9;
    }
    lay[0][0] = 1;
    lay[0][1] = 1;
    lay[1][0] = 1;
    lay[1][1] = 2;
    lay[2][0] = 1;
    lay[2][1] = 3;
    lay[3][0] = 1;
    lay[3][1] = 4;
    lay[4][0] = 1;
    lay[4][1] = 5;
    blockadd();
    if (SDL_Init(SDL_INIT_VIDEO) == 0) {
        if (SDL_CreateWindowAndRenderer(640, 480, 0, &window, &renderer) == 0) {
            SDL_bool done = SDL_FALSE;
            while (!done) {
                SDL_PollEvent(&event);
                if (event.type == SDL_KEYDOWN && downb > 0) { downb++; };
                if (event.type == SDL_KEYDOWN && (downb == 0 || downb > 600))
                {
                    timey = 0;
                    downb++;
                    switch (event.key.keysym.sym)
                    {
                    case SDLK_UP:
                        up();
                        break;

                    case SDLK_DOWN:
                        down();
                        break;

                    case SDLK_LEFT:
                        left();
                        break;

                    case SDLK_RIGHT:
                        right();
                        break;

                    }
                    if (downb > 600) { downb = 500; };
                }
                if (event.type == SDL_KEYUP)
                {
                    downb = 0;
                }

                for (i = 1; i < 26; i++) {
                    for (j = 1; j < 26; j++) {
                        if (a[i][j] != 1) { a[i][j] = 0; };
                    }
                }

                for (i = 0; i < 999; i++) {
                    if (lay[i][1] == -9) { u = i-1; break; };
                }
                for (i = u; i > 0; i--) {
                    a[lay[i][0]][lay[i][1]] = 2;
                }

                for (i = 1; i < 26; i++) {
                    for (j = 1; j < 26; j++) {
                        colori(i, j);
                    }
                }

                while (SDL_PollEvent(&event)) {
                    if (event.type == SDL_QUIT) {
                        done = SDL_TRUE;
                    }
                }
                draw_me();

                if (timey > 2000 / (score / 1000)) { timey = 0; next(); }
                SDL_RenderPresent(renderer);
                timey++;
            }
        }

        if (renderer) {
            SDL_DestroyRenderer(renderer);
        }
        if (window) {
            SDL_DestroyWindow(window);
        }
    }
    SDL_Quit();
    return 0;
}
