#include <cstdlib>
#include <SDL.h>
#include <iostream>
#include <ctime>
#include <thread>
SDL_Surface* surface;
SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;
SDL_Event event;
SDL_Rect block;


const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
int downb = 0, ret = 3, tep = 1, timey = 0;
double score = 1000;
int a[22][13];
int xo, yo, xt, yt, xr, yr, xf, yf;


void movedown() {
    int i, j, tr;
    for (i = 1; i < 21; i++) {
        tr = 1;
        for (j = 2; j < 12; j++) {
            if (a[i][j] == 0) { tr = 0; break; };
        }
        if (tr == 1) {
            for (i = i; i > 0; i--) {
                for (j = 2; j < 12; j++) {
                    a[i][j] = a[i - 1][j];
                };
            };
            score = score + 50;
            movedown();
        }
    }
}

int blockadd() {
    ret = 3;
    tep = (rand() % 7) + 1;
    switch (tep) {
    case 1: xo = 100, yo = 20; xt = 120, yt = 20; xr = 140, yr = 20; xf = 160, yf = 20; break;
    case 2: xo = 100, yo = 20; xt = 120, yt = 20; xr = 140, yr = 20; xf = 140, yf = 40; break;
    case 3: xo = 120, yo = 20; xt = 120, yt = 40; xr = 140, yr = 20; xf = 160, yf = 20; break;
    case 4: xo = 120, yo = 40; xt = 120, yt = 20; xr = 140, yr = 20; xf = 140, yf = 40; break;
    case 5: xo = 100, yo = 40; xt = 120, yt = 40; xr = 120, yr = 20; xf = 140, yf = 20; break;
    case 6: xo = 100, yo = 20; xt = 120, yt = 20; xr = 120, yr = 40; xf = 140, yf = 40; break;
    case 7: xo = 100, yo = 40; xt = 120, yt = 20; xr = 140, yr = 40; xf = 120, yf = 40; break;
    }
    return 0;
}
int relod() {
    ret = (ret + 1) % 4;
    switch (tep) {
    case 1:
        switch (ret) {
        case 0:xo = xo + 40; yo = yo - 20; xt = xt + 20; yr = yr + 20; xf = xf - 20; yf = yf + 40; break;
        case 1:xo = xo + 20; yo = yo + 40; yt = yt + 20; xr = xr - 20; xf = xf - 40; yf = yf - 20; break;
        case 2:xo = xo - 40; yo = yo + 20; xt = xt - 20; yr = yr - 20; xf = xf + 20; yf = yf - 40; break;
        case 3:xo = xo - 20; yo = yo - 40; yt = yt - 20; xr = xr + 20; xf = xf + 40; yf = yf + 20; break;
        }break;
    case 2:
        switch (ret) {
        case 0:xf = xf - 40; yr = yr + 20; xr = xr - 20; yo = yo - 20; xo = xo + 20; break;
        case 1:yf = yf - 40; yr = yr - 20; xr = xr - 20; yo = yo + 20; xo = xo + 20; break;
        case 2:xf = xf + 40; yr = yr - 20; xr = xr + 20; yo = yo + 20; xo = xo - 20; break;
        case 3:yf = yf + 40; yr = yr + 20; xr = xr + 20; yo = yo - 20; xo = xo - 20; break;
        }break;
    case 3:
        switch (ret) {
        case 0:yt = yt - 40; yo = yo - 20; xo = xo + 20; yf = yf + 20; xf = xf - 20; break;
        case 1:xt = xt + 40; yo = yo + 20; xo = xo + 20; yf = yf - 20; xf = xf - 20; break;
        case 2:yt = yt + 40; yo = yo + 20; xo = xo - 20; yf = yf - 20; xf = xf + 20; break;
        case 3:xt = xt - 40; yo = yo - 20; xo = xo - 20; yf = yf + 20; xf = xf + 20; break;
        }break;
    case 5:
        switch (ret) {
        case 0:yf = yf + 40; xr = xr + 20; yr = yr + 20; xo = xo + 20; yo = yo - 20; break;
        case 1:xf = xf - 40; xr = xr - 20; yr = yr + 20; xo = xo + 20; yo = yo + 20; break;
        case 2:yf = yf - 40; xr = xr - 20; yr = yr - 20; xo = xo - 20; yo = yo + 20; break;
        case 3:xf = xf + 40; xr = xr + 20; yr = yr - 20; xo = xo - 20; yo = yo - 20; break;
        }break;
    case 6:
        switch (ret) {
        case 0:xo = xo + 40; xt = xt + 20; yt = yt + 20; xf = xf - 20; yf = yf + 20; break;
        case 1:yo = yo + 40; xt = xt - 20; yt = yt + 20; xf = xf - 20; yf = yf - 20; break;
        case 2:xo = xo - 40; xt = xt - 20; yt = yt - 20; xf = xf + 20; yf = yf - 20; break;
        case 3:yo = yo - 40; xt = xt + 20; yt = yt - 20; xf = xf + 20; yf = yf + 20; break;
        }break;
    case 7:
        switch (ret) {
        case 0:xo = xo + 20; yo = yo - 20;   xt = xt + 20; yt = yt + 20;   xr = xr - 20; yr = yr + 20; break;
        case 1:xo = xo + 20; yo = yo + 20;   xt = xt - 20; yt = yt + 20;   xr = xr - 20; yr = yr - 20; break;
        case 2:xo = xo - 20; yo = yo + 20;   xt = xt - 20; yt = yt - 20;   xr = xr + 20; yr = yr - 20; break;
        case 3:xo = xo - 20; yo = yo - 20;   xt = xt + 20; yt = yt - 20;   xr = xr + 20; yr = yr + 20; break;
        }break;
    };

    return 0;
}

int left() {
    if (a[yo / 20][xo / 20 - 1] == 0 && a[yt / 20][xt / 20 - 1] == 0 && a[yr / 20][xr / 20 - 1] == 0 && a[yf / 20][xf / 20 - 1] == 0) {
        xo = xo - 20;
        xt = xt - 20;
        xr = xr - 20;
        xf = xf - 20;
    };
    return 0;
}

int right() {
    if (a[yo / 20][xo / 20 + 1] == 0 && a[yt / 20][xt / 20 + 1] == 0 && a[yr / 20][xr / 20 + 1] == 0 && a[yf / 20][xf / 20 + 1] == 0) {
        xo = xo + 20;
        xt = xt + 20;
        xr = xr + 20;
        xf = xf + 20;
    };
    return 0;
}

int down() {
    if (a[yo / 20 + 1][xo / 20] == 0 && a[yt / 20 + 1][xt / 20] == 0 && a[yr / 20 + 1][xr / 20] == 0 && a[yf / 20 + 1][xf / 20] == 0) {
        yo = yo + 20;
        yt = yt + 20;
        yr = yr + 20;
        yf = yf + 20;
    }
    else {
        a[yo / 20][xo / 20] = tep;
        a[yt / 20][xt / 20] = tep;
        a[yr / 20][xr / 20] = tep;
        a[yf / 20][xf / 20] = tep;
        movedown();
        blockadd();
    };
    return 0;
}
int up() {
    
        yo = yo - 20;
        yt = yt - 20;
        yr = yr - 20;
        yf = yf - 20;
    
    return 0;
}
int colori(int y,int x) {
    block.x = x * 20;
    block.y = y * 20;
    switch (a[y][x])
    {
        case 5:SDL_SetRenderDrawColor(renderer, 255, 0, 0, SDL_ALPHA_OPAQUE);break;
        case 1:SDL_SetRenderDrawColor(renderer, 0, 255, 255, SDL_ALPHA_OPAQUE);break;
        case 6:SDL_SetRenderDrawColor(renderer, 0, 255, 0, SDL_ALPHA_OPAQUE);break;
        case 4:SDL_SetRenderDrawColor(renderer, 255, 255, 0, SDL_ALPHA_OPAQUE);break;
        case 7:SDL_SetRenderDrawColor(renderer, 150, 0, 150, SDL_ALPHA_OPAQUE);break;
        case 3:SDL_SetRenderDrawColor(renderer, 255, 150, 0, SDL_ALPHA_OPAQUE);break;
        case 2:SDL_SetRenderDrawColor(renderer, 0, 0, 255, SDL_ALPHA_OPAQUE);break;
        default:SDL_SetRenderDrawColor(renderer, 150, 150, 150, SDL_ALPHA_OPAQUE);break;
    }
    SDL_RenderFillRect(renderer, &block);
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);
    SDL_RenderDrawRect(renderer, &block);
    
    return 0;
}
void blockp(){
    SDL_SetRenderDrawColor(renderer, 100, 100, 100, SDL_ALPHA_OPAQUE);
    block.x = xo; block.y = yo;
    SDL_RenderFillRect(renderer, &block);
    block.x = xt; block.y = yt;
    SDL_RenderFillRect(renderer, &block);
    block.x = xr; block.y = yr;
    SDL_RenderFillRect(renderer, &block);
    block.x = xf; block.y = yf;
    SDL_RenderFillRect(renderer, &block);
}
int main(int argc, char* argv[])
{
    block.w = 20;
    block.h = 20;
    blockadd();
    int i, j;
    for (j = 2; j < 12; j++) {
        a[21][j] = 1;
    }
    for (i = 1; i < 21; i++) {
        a[i][1] = 1;
        a[i][12] = 1;
        for (j = 2; j < 12; j++) {
            a[i][j] = 0;
        }
    }
    if (SDL_Init(SDL_INIT_VIDEO) == 0) {
        if (SDL_CreateWindowAndRenderer(640, 480, 0, &window, &renderer) == 0) {
            SDL_bool done = SDL_FALSE;
            while (!done) {
                SDL_PollEvent(&event);
                if (event.type == SDL_KEYDOWN && downb > 0) { downb++; };
                if (event.type == SDL_KEYDOWN && (downb == 0||downb > 600))
                {

                    downb ++;
                    switch (event.key.keysym.sym)
                    {
                    case SDLK_UP:
                        relod();
                        if (a[yo / 20][xo / 20] != 0 || a[yt / 20][xt / 20] != 0 || a[yr / 20][xr / 20] != 0 || a[yf / 20][xf / 20] != 0) { relod(); relod(); relod(); };
                        break;

                    case SDLK_DOWN:
                        down();
                        break;

                    case SDLK_LEFT:
                        left();
                        break;

                    case SDLK_RIGHT:
                        right();
                        break;

                    default:
                        for (i = 1; i < 21; i++) {
                            for (j = 2; j < 12; j++) {
                                std::cout << a[i][j];
                            }
                            std::cout << std::endl;
                        }
                        std::cout << std::endl;
                        break;
                    }
                    if (downb > 600) { downb = 500; };
                }
                if (event.type == SDL_KEYUP)
                {
                    downb = 0;
                }

                for (i = 1; i < 21; i++) {
                    for (j = 2; j < 12; j++) {
                        colori(i,j);
                    }
                }

                while (SDL_PollEvent(&event)) {
                    if (event.type == SDL_QUIT) {
                        done = SDL_TRUE;
                    }
                }
                blockp();
                if (timey > 2000/(score/1000)) { timey = 0; down(); }
                SDL_RenderPresent(renderer);
                timey++;
            }
        }

        if (renderer) {
            SDL_DestroyRenderer(renderer);
        }
        if (window) {
            SDL_DestroyWindow(window);
        }
    }
    SDL_Quit();
    return 0;
}
